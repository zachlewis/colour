name: Continuous Integration

on: [push, pull_request]

jobs:
  continuous-integration:
    name: ${{ matrix.os }} - Python ${{ matrix.python-version }}
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-18.04, windows-latest]
        python-version: [2.7, 3.6, 3.7, 3.8]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
    - name: Environment Variables
      run: |
        echo "CI_PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV
        echo "CI_PACKAGE=colour" >> $GITHUB_ENV
        echo "CI_SHA=${{ github.sha }}" >> $GITHUB_ENV
        echo "CI_OPENIMAGEIO_VERSION=2.1.10.1" >> $GITHUB_ENV
        echo "CI_OPENIMAGEIO_ARTIFACT=https://github.com/colour-science/artifacts/releases/download/OpenImageIO-Release-2.1.10.1/OpenImageIO-Release-2.1.10.1.zip" >> $GITHUB_ENV
        echo "COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }}" >> $GITHUB_ENV
        echo "MPLBACKEND=AGG" >> $GITHUB_ENV
      shell: bash
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        brew install gnu-sed
        ln -s /usr/local/bin/gsed /usr/local/bin/sed
      shell: bash
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo apt-get --yes install libboost-all-dev libilmbase-dev libopenexr-dev libpng-dev libtiff5-dev
    - name: Install Poetry
      run: |
        curl -L https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py -o get-poetry.py
        python get-poetry.py --version 1.0.10
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      shell: bash
    - name: Update pyproject.toml file (Python 2.7)
      if: matrix.python-version == '2.7'
      run: |
        sed -i.bak 's/python = "~2.7 || ^3.6"/python = "~2.7"/g' pyproject.toml
        sed -i.bak '/scipy = "\^1\.1\.0"/ a qtconsole = "4.7.7"' pyproject.toml
      shell: bash
    - name: Update pyproject.toml file (Python 3.x)
      if: matrix.python-version != '2.7'
      run: |
        sed -i.bak 's/python = "~2.7 || ^3.6"/python = "^3.6"/g' pyproject.toml
      shell: bash
    - name: Update pyproject.toml file (Windows, Python 2.7)
      if: matrix.os == 'windows-latest' && matrix.python-version == '2.7'
      run: |
        sed -i.bak '/scipy = "\^1\.1\.0"/ a pywin32 = "228"' pyproject.toml
      shell: bash
    - name: Install Package Dependencies
      run: |
        poetry install --extras "optional plotting"
        poetry run python -c "import imageio;imageio.plugins.freeimage.download()"
      shell: bash
    - name: Install OpenImageIO (Ubuntu)
      if: matrix.os == 'ubuntu-18.04' && matrix.python-version == '3.6'
      run: |
        curl -L $CI_OPENIMAGEIO_ARTIFACT -o OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION.zip
        unzip OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION.zip -d OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION
        sudo cp OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/bin/* /usr/bin/
        sudo cp -r OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/lib/* /usr/lib/
        sudo rm -rf /usr/lib/python$CI_PYTHON_VERSION
        cp OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/lib/python$CI_PYTHON_VERSION/site-packages/OpenImageIO.so $(poetry env info -p)/lib/python$CI_PYTHON_VERSION/site-packages/
      shell: bash
    - name: Lint with flake8
      run: |
        poetry run flake8 $CI_PACKAGE --count --show-source --statistics
      shell: bash
    - name: Test with nosetests
      run: |
        poetry run python -W ignore -m nose -q -v --with-doctest --doctest-options=+ELLIPSIS --with-coverage --cover-package=$CI_PACKAGE $CI_PACKAGE
      shell: bash
    - name: Upload Coverage to coveralls.io
      if: matrix.python-version == '3.6' || matrix.python-version == '3.7' || matrix.python-version == '3.8'
      run: |
        if [ -z "$COVERALLS_REPO_TOKEN" ]; then echo \"COVERALLS_REPO_TOKEN\" secret is undefined!; else poetry run coveralls; fi
      shell: bash
